version: 2.1

orbs:
  slack: circleci/slack@4.9.3


commands:
   install_aws_cli:
     description: install AWS CLI
     steps:
      - run: 
         command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

   install_ansible:
      description: install Ansible
      steps:
        - run:
           command: |
            python3 -m pip install --user ansible
      #  - run: 
      #     command: |
      #       sudo apt update
      #       sudo apt install software-properties-common
      #       sudo add-apt-repository --yes --update ppa:ansible/ansible
      #       sudo apt install ansible
            
   install_nodejs:
        description: Install Node.js 13.8.0
        steps:
          - run:
              name: Install Node.js 13.8.0
              command: |
                # Install Node.js LTS version as our base Node.js version
                curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
                sudo apt install -y nodejs

                # Use n version manager to use Node.js v13.8.0
                sudo npm install --global n
                sudo n 13.8.0


   notify_on_failure:
     steps:
       - slack/notify:
           event: fail
           channel: circleci-pipeline
           template: basic_fail_1
           
   destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        Workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7} 
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
              aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>

   revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  #build frontend
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependencies
      - notify_on_failure


  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies
      - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Front-end Unit Test
          command: |
            cd frontend
            npm install
            npm run test
      - notify_on_failure

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: back-end Unit Test
          command: |
            cd backend
            npm install
            npm run test
      - notify_on_failure

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit fix --audit-level=critical
             npm audit --audit-level=critical
             
      - notify_on_failure

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  deploy-infrastructure:
    docker:
       - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:project,Values=udapeople \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment    
      - notify_on_failure

  configure-infrastructure:
    docker:
       #- image: cimg/base:stable
       - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout    
      - install_aws_cli
      # # install ansible from the predefined command
      - install_ansible

      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["09:5d:8c:8b:b0:46:63:a1:a7:a4:d3:a8:09:b7:12:d9"]

      # attach workspace
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --no-cache tar gzip
      #       pip install ansible awscli
      #       apk add openssh-client
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment    
      - notify_on_failure
      
  run-migrations:
    docker:
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      - install_aws_cli
      - install_nodejs
      - restore_cache:
          keys: [backend-dependencies]
      # - run:
      #     name: Install dependencies
      #     command: |
      #       sudo apt-get update
      #       sudo apt-get install -y awscli
     
      - run:
          name: npm install
          command: |
            cd backend
            npm install
            
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            
      - run:
          name: Send migration results to KVdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
     # Here's where you will add some code to rollback on failure         
      - destroy-environment    
      - notify_on_failure
      

  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs

      - restore_cache:
          keys: [frontend-dependencies]

      - run:
          name: Install dependencies
          command: |
             cd frontend
             npm install

      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
            # your code here
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "${API_URL}"

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Here's where you will add some code to rollback on failure    
      - destroy-environment    
      - notify_on_failure  
                  
                    
  deploy-backend:
    docker:
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      - install_aws_cli
      - install_nodejs
      - install_ansible

      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["09:5d:8c:8b:b0:46:63:a1:a7:a4:d3:a8:09:b7:12:d9"]

      # attach workspace
      - attach_workspace:
          at: ~/

      - restore_cache:
          keys: [backend-dependencies]

      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install

      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czvf artifact.tar.gz dist/* package*
            echo "the content of artifact.tar.gz"
            tar -tf artifact.tar.gz
      - run:
          name: Copy tar file
          command: |
            cp ./backend/artifact.tar.gz ./.circleci/ansible/roles/deploy/files
            ls ./.circleci/ansible/roles/deploy/files

      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

            # Here's where you will add some code to rollback on failure  
      
      - destroy-environment    
      - notify_on_failure  


  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url and run backend smoke test
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"

            echo $API_URL
            
            if curl -s $API_URL/api/status | grep "ok"
            then 
              exit 0
            else
              exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
                exit 1
            else
                exit 2
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment    
      - notify_on_failure 


#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
  notify_on_success:
    docker:
      - image: cimg/base:2023.03
    steps:
      - slack/notify:
          event: pass
          channel: circleci-pipeline
          template: success_tagged_deployment_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_success:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]